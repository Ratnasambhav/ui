/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface RdsButton {
        "disabled": boolean;
        "loading": boolean;
        "rounded": 'none' | 'sm' | 'md' | 'lg' | 'full';
        "variant": 'primary' | 'secondary' | 'ghost';
    }
}
export interface RdsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsButtonElement;
}
declare global {
    interface HTMLRdsButtonElementEventMap {
        "clicked": any;
    }
    interface HTMLRdsButtonElement extends Components.RdsButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRdsButtonElementEventMap>(type: K, listener: (this: HTMLRdsButtonElement, ev: RdsButtonCustomEvent<HTMLRdsButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRdsButtonElementEventMap>(type: K, listener: (this: HTMLRdsButtonElement, ev: RdsButtonCustomEvent<HTMLRdsButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRdsButtonElement: {
        prototype: HTMLRdsButtonElement;
        new (): HTMLRdsButtonElement;
    };
    interface HTMLElementTagNameMap {
        "rds-button": HTMLRdsButtonElement;
    }
}
declare namespace LocalJSX {
    interface RdsButton {
        "disabled"?: boolean;
        "loading"?: boolean;
        "onClicked"?: (event: RdsButtonCustomEvent<any>) => void;
        "rounded"?: 'none' | 'sm' | 'md' | 'lg' | 'full';
        "variant"?: 'primary' | 'secondary' | 'ghost';
    }
    interface IntrinsicElements {
        "rds-button": RdsButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rds-button": LocalJSX.RdsButton & JSXBase.HTMLAttributes<HTMLRdsButtonElement>;
        }
    }
}
